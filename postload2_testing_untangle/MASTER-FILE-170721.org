* packages

#+BEGIN_SRC emacs-lisp

;;; Commentary:
;;; this is only some of the packags.
;;; Some other required packages are loaded in the following postload files.
;;; using prelude-require-package ensures that the packges are loaded
;;; at the time required, if necessary.

;;; Code:

(require 'prelude-packages)

;; also load prelude-required packages manually.
;; this loads packages which are not (auto-) loaded otherwise.
;; apparently prelude-required packages will be available after restarting emacs 2 ...
(defun prelude-load-require-package (package)
  "Install PACKAGE unless already installed."
  (unless (memq package prelude-packages)
    (add-to-list 'prelude-packages package))
  (unless (package-installed-p package)
    (package-install package))
  (require package))

(defun prelude-load-require-packages (packages)
  "Ensure PACKAGES are installed.
Missing packages are installed automatically."
  (mapc #'prelude-load-require-package packages))

(prelude-load-require-packages '(moe-theme powerline))

#+END_SRC

* Theme Cursor Beep

#+BEGIN_SRC emacs-lisp
;;; 001_Theme_Cursor_Beem --- Basic theming

;;; Commentary:
;;; basic theming, cursor style.

;;; Code:

(require'moe-theme)
(prelude-load-require-package 'moe-theme)
(setq powerline-moe-theme t)
(moe-dark)
(require'powerline)
(powerline-default-theme)
(custom-set-faces
 '(info-title-3 ((t (:inherit info-title-4 :foreground "white" :height 1.2))))
 '(info-title-4 ((t (:inherit info-title-4 :foreground "red"))))
 '(mode-line ((t (
                  :background "DarkCyan"
                              :foreground "tomato"
                              :box (:line-width 1 :color "turquoise3")
                              :weight light :height 118 :family "Monospace")))))

(setq cursor-type 'bar)   ;; show cursor as thin vertical bar.
(blink-cursor-mode 1)     ;; turn on cursor blinking

(setq visible-bell nil)   ;; instead of ringing a bell ...
(setq ring-bell-function (lambda () ;; .. invert the mode line colors for 1 second
                           (invert-face 'mode-line)
                           (run-with-timer 1 nil 'invert-face 'mode-line)))

(set-cursor-color "tomato")

#+END_SRC

* multiple cursors

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-)") 'ace-mc-add-multiple-cursors)
(global-set-key (kbd "C-M-)") 'ace-mc-add-single-cursor)
#+END_SRC

* hugo

#+BEGIN_SRC emacs-lisp
;;; 004_hugo --- Utilities for blog + website editing with HUGO

;;; Commentary:
;;; Utilities for blog + website editing with HUGO

;;; Code:
(prelude-load-require-package 'easy-hugo)
#+END_SRC

* bookmark plus

#+BEGIN_SRC emacs-lisp

;;; Commentary:
;;; Better editing of bookmarks perhaps the advantage

;;; Code:
(prelude-load-require-packages '(bm autobookmarks bookmark+))

#+END_SRC

* helm-swoop

#+BEGIN_SRC emacs-lisp

(prelude-load-require-package 'helm-swoop)

#+END_SRC

* untangle tangle

#+BEGIN_SRC emacs-lisp

;;; Commentary:
;;; org-el-untangle:
;;; import muliple el files from one folder into one org mode file.
;;; org-el-tangle-sections
;;; export each sections' emacs-lisp block to a separate file.

;;; Code:

(defun org-el-untangle (directory)
  "Import muliple el files from one folder into one org mode file."
  (interactive "D")
  (let
      ((filename (concat "MASTER-FILE-" (format-time-string "%y%m%d") ".org"))
       (files (file-expand-wildcards (concat directory "*.el")))
       (target-buffer))
    ;; (message (concat (file-truename directory) filename))
    (find-file filename)
    (erase-buffer)
    (setq target-buffer (current-buffer))
    (mapc 'org-el-insert-1-file files)))

(defun org-el-insert-1-file (fname)
  "Insert file FNAME into the master org file.
Create org header and SRC block from data in FNAME file."
  (message fname)
  (save-excursion
    (let*
        ((fname-base (file-name-base fname))
         (header (concat
                  "\n* "
                  (replace-regexp-in-string "_" " " (substring fname-base 3 nil))
                  "\n"))
         found body-start body-end body)
      (find-file fname)
      (goto-char (point-min))
      (setq found
            (search-forward
             fname-base
             (line-end-position 1)
             t
             1))
      (cond
       (found
        (message "a header WAS found")
        (message "the line containing the header is:")
        (message (buffer-substring (line-beginning-position)
                                   (line-end-position 1)))
        (forward-line 1)
        (setq body-start (point)))
       (t
        (message "a header was NOTTTTTTTTT found")
        (message "the first line is:")
        (message (buffer-substring (line-beginning-position)
                                   (line-end-position 1)))
        (setq body-start (point-min))
        ))
      (setq found
            (search-forward
             (format "provide '%s" fname-base)
             nil
             t
             1))
      (cond
       (found
        (message "a FOOTER WAS found")
        (message "the line containing the FOOTER is:")
        (message (buffer-substring (line-beginning-position)
                                   (line-end-position 1)))
        (setq body-end (line-beginning-position)))
       (t
        (message "a FOOTER was NOTTTTTTTTT found")
        (message "the first line is:")
        (message (buffer-substring (line-beginning-position)
                                   (line-end-position 1)))
        (setq body-end (point-max))
        ))
      (setq body (buffer-substring body-start body-end))
      (kill-buffer (current-buffer))
      (with-current-buffer target-buffer
        (goto-char (point-max))
        (insert (replace-regexp-in-string "  " " " header))
        (insert "\n#+BEGIN_SRC emacs-lisp\n")
        (insert body)
        (insert "#+END_SRC\n\n"))
      ))
  )

(defun org-el-tangle-sections ()
  "Export each sections' emacs-lisp block to a separate file."
  (interactive)
  )

(format-time-string "%y%m%d")

#+END_SRC

* prelude-customization

#+BEGIN_SRC emacs-lisp
(setq prelude-whitespace nil)

;; undo prelude shift-meta-up/down keybindings which interfere with org-mode
 (setq prelude-mode-map
   (let ((map (make-sparse-keymap)))
     (define-key map (kbd "C-c o") 'prelude-open-with)
     (define-key map (kbd "C-c g") 'prelude-google)
     (define-key map (kbd "C-c G") 'prelude-github)
     (define-key map (kbd "C-c y") 'prelude-youtube)
     (define-key map (kbd "C-c U") 'prelude-duckduckgo)
;;     ;; mimic popular IDEs binding, note that it doesn't work in a terminal session
     (define-key map [(shift return)] 'prelude-smart-open-line)
     (define-key map (kbd "M-o") 'prelude-smart-open-line)
     (define-key map [(control shift return)] 'prelude-smart-open-line-above)
     (define-key map [(control shift up)]  'move-text-up)
     (define-key map [(control shift down)]  'move-text-down)
;;     ;; the following 2 break structure editing with meta-shift-up / down in org mode
;;     ;;    (define-key map [(meta shift up)]  'move-text-up)
;;     ;;    (define-key map [(meta shift down)]  'move-text-down)
;;     ;; new substitutes for above:  (these are overwritten by other modes...)
;;     ;; (define-key map (kbd "C-c [")  'move-text-up)
;;     ;; (define-key map (kbd "C-c ]")  'move-text-down)
;;     ;; (define-key map [(control meta shift up)]  'move-text-up)
;;     ;; (define-key map [(control meta shift down)]  'move-text-down)
     (define-key map (kbd "C-c n") 'prelude-cleanup-buffer-or-region)
     (define-key map (kbd "C-c f")  'prelude-recentf-ido-find-file)
     (define-key map (kbd "C-M-z") 'prelude-indent-defun)
     (define-key map (kbd "C-c u") 'prelude-view-url)
     (define-key map (kbd "C-c e") 'prelude-eval-and-replace)
     (define-key map (kbd "C-c s") 'prelude-swap-windows)
     (define-key map (kbd "C-c D") 'prelude-delete-file-and-buffer)
     (define-key map (kbd "C-c d") 'prelude-duplicate-current-line-or-region)
     (define-key map (kbd "C-c M-d") 'prelude-duplicate-and-comment-current-line-or-region)
     (define-key map (kbd "C-c r") 'prelude-rename-buffer-and-file)
     (define-key map (kbd "C-c t") 'prelude-visit-term-buffer)
     (define-key map (kbd "C-c k") 'prelude-kill-other-buffers)
;;     ;; another annoying overwrite of a useful org-mode command:
;;     ;; (define-key map (kbd "C-c TAB") 'prelude-indent-rigidly-and-copy-to-clipboard)
     (define-key map (kbd "C-c I") 'prelude-find-user-init-file)
     (define-key map (kbd "C-c S") 'prelude-find-shell-init-file)
     (define-key map (kbd "C-c i") 'prelude-goto-symbol)
;;     ;; extra prefix for projectile
     (define-key map (kbd "s-p") 'projectile-command-map)
;;     ;; make some use of the Super key
     (define-key map (kbd "s-g") 'god-local-mode)
     (define-key map (kbd "s-r") 'prelude-recentf-ido-find-file)
     (define-key map (kbd "s-j") 'prelude-top-join-line)
     (define-key map (kbd "s-k") 'prelude-kill-whole-line)
     (define-key map (kbd "s-m m") 'magit-status)
     (define-key map (kbd "s-m l") 'magit-log)
     (define-key map (kbd "s-m f") 'magit-log-buffer-file)
     (define-key map (kbd "s-m b") 'magit-blame)
     (define-key map (kbd "s-o") 'prelude-smart-open-line-above)
     map))
#+END_SRC

* multiple-cursors

#+BEGIN_SRC emacs-lisp

(prelude-load-require-packages '(multiple-cursors mc-extras ace-mc))

;; ace-mc
(global-set-key (kbd "C-c )") 'ace-mc-add-multiple-cursors)
(global-set-key (kbd "C-M-)") 'ace-mc-add-single-cursor)

;; multiple-cursors

(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
;; mc-extras

(define-key mc/keymap (kbd "C-. C-d") 'mc/remove-current-cursor)
(define-key mc/keymap (kbd "C-. d")   'mc/remove-duplicated-cursors)

(define-key mc/keymap (kbd "C-. C-.") 'mc/freeze-fake-cursors-dwim)

(define-key mc/keymap (kbd "C-. =")   'mc/compare-chars)

;; Emacs 24.4+ comes with rectangle-mark-mode.
(define-key rectangle-mark-mode-map (kbd "C-. C-,")
  'mc/rect-rectangle-to-multiple-cursors)

(define-key cua--rectangle-keymap   (kbd "C-. C-,")
  'mc/cua-rectangle-to-multiple-cursors)

(mc/cua-rectangle-setup)
#+END_SRC

* last-actions-at-open

#+BEGIN_SRC emacs-lisp
(toggle-frame-fullscreen)
#+END_SRC
